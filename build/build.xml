<?xml version = '1.0'?>
<!DOCTYPE project> 
<project name="Aloha Builder" default="all">
	<!-- Define some properties we use in our build process -->
	<property file="build.properties" />
	<property name="srcdir" 						value="../WebContent/" />
	<property name="srcdir.examples" 				value="${srcdir}/examples" />
	<property name="testdir" 						value="../test/" />
	<property name="filename" 						value="aloha" />
	<property name="outdir" 						value="out" />
	<property name="includesdir" 					value="includes" />
	<property name="zipdir" 						value="out" />
	<property name="depsdir" 						value="deps" />
	<property name="pluginsdir"						value="plugins" />
	<property name="packagedir" 					value="${outdir}/aloha-${version}" />
	<property name="compiler.yui" 					value="${basedir}/${depsdir}/yuicompressor-2.4.2.jar" />
	<property name="compiler.closure" 				value="${basedir}/${depsdir}/closure.jar" />
	
	<!-- Define the output directories -->
	<property name="outdirs.uncompressed" 			value="${packagedir}/uncompressed" />
	<property name="outdirs.compressed" 			value="${packagedir}/aloha" />
	<property name="outdirs.examples" 				value="${packagedir}/examples" />
	
	<!-- Define the files for the includes (they are listed within the following files) -->
	<property name="includes.core.js.filename" 		value="core-js.txt"/>
	<property name="includes.core.css.filename" 	value="core-css.txt"/>
	<property name="includes.deps.js.filename" 		value="deps-js.txt"/>
	<property name="includes.deps.css.filename" 	value="deps-css.txt"/>
	<property name="includes.jquery.js.filename" 	value="jquery-js.txt"/>
	<property name="includes.jquery.css.filename" 	value="jquery-css.txt"/>
	<property name="includes.ext.js.filename" 		value="ext-js.txt"/>
	<property name="includes.ext.css.filename" 		value="et-css.txt"/>
	
	<!-- Define the files for generation -->
	<property name="outfiles.core.js.filename" 		value="${filename}-core.js"/>
	<property name="outfiles.core.css.filename" 	value="${filename}-core.css"/>
	<property name="outfiles.deps.js.filename" 		value="${filename}-deps.js"/>
	<property name="outfiles.deps.css.filename" 	value="${filename}-deps.css"/>
	<property name="outfiles.ext.js.filename" 		value="${filename}-ext.js"/>
	<property name="outfiles.ext.css.filename" 		value="${filename}-ext.css"/>
	<property name="outfiles.jquery.js.filename" 	value="${filename}-jquery.js"/>
	<property name="outfiles.jquery.css.filename" 	value="${filename}-jquery.css"/>
	<property name="outfiles.all.js.filename" 		value="${filename}.js"/>
	<property name="outfiles.all.css.filename" 		value="${filename}.css"/>
	
	<!-- Define the java executable used for compilers -->
	<property name="java" value="${java.home}${file.separator}bin${file.separator}java" />
	<path id="minify.classpath">
		<fileset dir="deps">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<tstamp>
		<format property="now" pattern="yyyy-MM-dd HH:mm:ss" locale="en,UK"/>
	</tstamp>
	
	<!-- Clean the output directories and files -->
	<target name="clean">
		<delete dir="${outdir}" />
		<delete dir="${zipdir}" />
	</target>

	<!-- Create the output directories -->
	<target name="makedirs">
		<mkdir dir="${outdirs.uncompressed}" />
		<mkdir dir="${outdirs.compressed}" />
	</target>

	<!-- This target is called with parameters includefile (called later, this is merely a function) -->
	<target name="prepare_includes" depends="makedirs">
		<copy file="${includesdir}/${includefile}" todir="${outdir}" overwrite="true"/>
		<fixcrlf file="${outdir}/${includefile}" eol="unix"/>
		<replaceregexp file="${outdir}/${includefile}" flags="gm" match="\n" replace=" "/>
	</target>
	
	<!-- Copys a directory - params [to] and [folder] -->
	<target name="copydir">
		<mkdir dir="${to}/${folder}" />
		<copy todir="${to}/${folder}">
			<fileset dir="${srcdir}/${folder}" />
		</copy>
	</target>
	
	<!-- Function: Compress a CSS File using YUI - $infile, $outfile -->
	<target name="yuicss">
		<java jar="${compiler.yui}" fork="true" failonerror="true" output="${outdir}/yui.log" append="true">
			<arg line="--type css -o ${outfile} --verbose --charset UTF-8 ${infile}" />
			<classpath refid="minify.classpath" />
		</java>
	</target>
	
	<!-- Function: Compress a JavaScript File using YUI - $infile, $outfile -->
	<target name="yuijs">
		<java jar="${compiler.yui}" fork="true" failonerror="true" output="${outdir}/yui.log" append="true">
			<arg line="--nomunge --type js -o ${outfile} --verbose --charset UTF-8 ${infile}" />
			<classpath refid="minify.classpath" />
		</java>
	</target>
	
	<!-- Function: Compress a JavaScript File using Closure - $infile, $outfile -->
	<target name="closurejs">
		<java jar="${compiler.closure}" fork="true" failonerror="true" output="${outdir}/closure.log" append="true">
			<arg line="--js_output_file=${outfile} --js=${infile}" />
			<classpath refid="minify.classpath" />
		</java>
	</target>
	
	<!-- Create the include.js file - This is used for dev purposes, not production purposes, so as such; IT IS STILL NEEDED -->
	<target name="build-dev-include" depends="makedirs">
		<!-- Load in the Regular Expression Replaces -->
		<loadfile property="dev.includejs.subst" srcfile="deps/includejs-substitution.txt"/>
		<loadfile property="dev.includecss.subst" srcfile="deps/includecss-substitution.txt"/>
		
		<!-- The jQuery JS -->
		<copy file="${includesdir}/${includes.jquery.js.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${includes.jquery.js.filename}" match="(.+)" replace="${dev.includejs.subst}"/>
		
		<!-- The jQuery CSS -->
		<copy file="${includesdir}/${includes.jquery.css.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${includes.jquery.css.filename}" match="(.+)" replace="${dev.includecss.subst}"/>
	
		<!-- The EXT JS -->
		<copy file="${includesdir}/${includes.ext.js.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${includes.ext.js.filename}" match="(.+)" replace="${dev.includejs.subst}"/>
		
		<!-- The EXT CSS -->
		<copy file="${includesdir}/${includes.ext.css.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${includes.ext.css.filename}" match="(.+)" replace="${dev.includecss.subst}"/>
	
		<!-- The Deps JS -->
		<copy file="${includesdir}/${includes.deps.js.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${includes.deps.js.filename}" match="(.+)" replace="${dev.includejs.subst}"/>
		
		<!-- The Deps CSS -->
		<copy file="${includesdir}/${includes.deps.css.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${includes.deps.css.filename}" match="(.+)" replace="${dev.includecss.subst}"/>

		<!-- The Core JS -->
		<copy file="${includesdir}/${includes.core.js.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${includes.core.js.filename}" match="(.+)" replace="${dev.includejs.subst}"/>
		
		<!-- The Core CSS -->
		<copy file="${includesdir}/${includes.core.css.filename}" todir="${outdir}" overwrite="true"/>
		<replaceregexp byline="true" file="${outdir}/${includes.core.css.filename}" match="(.+)" replace="${dev.includecss.subst}"/>
		
		<!-- Merge JS Files into Autoloader -->
		<concat destfile="${srcdir}/core/include.js" force="true">
			<fileset file="deps/includejs-header.txt"/>
			<filelist dir="${outdir}" files="${includes.jquery.js.filename},${includes.ext.js.filename},${includes.deps.js.filename},${includes.core.js.filename}"></filelist>
			<fileset file="deps/includejs-footer.txt"/>
		</concat>

		<!-- Merge CSS Files into Autoloader -->
		<concat destfile="${srcdir}/core/css.js" force="true">
			<fileset file="deps/includecss-header.txt"/>
			<filelist dir="${outdir}" files="${includes.jquery.css.filename},${includes.ext.css.filename},${includes.deps.css.filename},${includes.core.css.filename}"></filelist>
			<fileset file="deps/includecss-footer.txt"/>
		</concat>
	</target>
	
	<!-- Prepare the Uncompressed Directory -->
	<target name="prepareuncompressed" depends="makedirs">
		<!-- Copy the Necessary Dirs/Files to the Uncompressed Dir -->
		<antcall target="copydir">
			<param name="folder" value="deps"/>
			<param name="to" value="${outdirs.uncompressed}"/>
		</antcall>
		<antcall target="copydir">
			<param name="folder" value="css"/>
			<param name="to" value="${outdirs.uncompressed}"/>
		</antcall>
		<antcall target="copydir">
			<param name="folder" value="images"/>
			<param name="to" value="${outdirs.uncompressed}"/>
		</antcall>
		<antcall target="copydir">
			<param name="folder" value="i18n"/>
			<param name="to" value="${outdirs.uncompressed}"/>
		</antcall>
		<antcall target="copydir">
			<param name="folder" value="plugins"/>
			<param name="to" value="${outdirs.uncompressed}"/>
		</antcall>
	</target>
	
	<!-- Combine JS Files -->
	<target name="combine-js" depends="prepareuncompressed">
		<!-- Load the jQuery File List -->
		<antcall target="prepare_includes">
			<param name="includefile" value="${includes.jquery.js.filename}"/>
		</antcall>
		<loadfile property="includes.jquery.js.list" srcfile="${outdir}/${includes.jquery.js.filename}"/>
		
		<!-- Load the EXT File List -->
		<antcall target="prepare_includes">
			<param name="includefile" value="${includes.ext.js.filename}"/>
		</antcall>
		<loadfile property="includes.ext.js.list" srcfile="${outdir}/${includes.ext.js.filename}"/>
		
		<!-- Load the Deps File List -->
		<antcall target="prepare_includes">
			<param name="includefile" value="${includes.deps.js.filename}"/>
		</antcall>
		<loadfile property="includes.deps.js.list" srcfile="${outdir}/${includes.deps.js.filename}"/>
		
		<!-- Load the Core File List -->
		<antcall target="prepare_includes">
			<param name="includefile" value="${includes.core.js.filename}"/>
		</antcall>
		<loadfile property="includes.core.js.list" srcfile="${outdir}/${includes.core.js.filename}"/>
		
		<!-- 
			Create the Uncompressed Files
		-->
		
		<!-- Generate Aloha jQuery File -->
		<concat destfile="${outdirs.uncompressed}/${outfiles.jquery.js.filename}" force="no">
			<filelist dir="${srcdir}" files="${includes.jquery.js.list}"/>
		</concat>
		
		<!-- Generate Aloha EXT File -->
		<concat destfile="${outdirs.uncompressed}/${outfiles.ext.js.filename}" force="no">
			<filelist dir="${srcdir}" files="${includes.ext.js.list}"/>
		</concat>
		
		<!-- Generate Aloha Deps File -->
		<concat destfile="${outdirs.uncompressed}/${outfiles.deps.js.filename}" force="no">
			<filelist dir="${srcdir}" files="${includes.deps.js.list}"/>
		</concat>
		
		<!-- Generate Aloha Core File -->
		<concat destfile="${outdirs.uncompressed}/${outfiles.core.js.filename}" force="no">
			<filelist dir="${srcdir}" files="${includes.core.js.list}"/>
		</concat>
		
		<!-- 
			Create the Combined File
		-->
		
		<!-- Find & Replace GENTICS.Aloha.version inside the Aloha Core file with the current build version -->
		<replace file="${outdirs.uncompressed}/${outfiles.core.js.filename}" token="##ALOHAVERSION##" value="${version}"/>
		
		<!-- Create a Combined File -->
		<concat destfile="${outdirs.uncompressed}/${filename}.js" force="no">
			<filelist dir="${outdirs.uncompressed}" files="${outfiles.jquery.js.filename},${outfiles.ext.js.filename},${outfiles.deps.js.filename},${outfiles.core.js.filename}" />
		</concat>
	</target>
	
	<!-- Combine CSS Files (deprecated) -->
	<target name="combine-css" depends="prepareuncompressed">
		<!-- Load the Core File List -->
		<antcall target="prepare_includes">
			<param name="includefile" value="${includes.core.css.filename}"/>
		</antcall>
		<loadfile property="includes.core.css.list" srcfile="${outdir}/${includes.core.css.filename}"/>
		
		<!-- Load the Deps File List -->
		<antcall target="prepare_includes">
			<param name="includefile" value="${includes.deps.css.filename}"/>
		</antcall>
		<loadfile property="includes.deps.css.list" srcfile="${outdir}/${includes.deps.css.filename}"/>
		
		<!-- 
			Create the Uncompressed Files
		-->
		
		<!-- Generate Aloha Core File -->
		<concat destfile="${outdirs.uncompressed}/${outfiles.core.css.filename}" force="no">
			<filelist dir="${srcdir}" files="${includes.core.css.list}"/>
		</concat>
		
		<!-- Generate Aloha Deps File -->
		<concat destfile="${outdirs.uncompressed}/${outfiles.deps.css.filename}" force="no">
			<filelist dir="${srcdir}" files="${includes.deps.css.list}"/>
		</concat>
		
		<!-- 
			Create the Combined File
		-->
		
		<!-- Find & Replace GENTICS.Aloha.version inside the Aloha Core file with the current build version -->
		<replace file="${outdirs.uncompressed}/${outfiles.core.css.filename}" token="##ALOHAVERSION##" value="${version}"/>
		
		<!-- Create a Combined File -->
		<concat destfile="${outdirs.uncompressed}/${filename}.css" force="no">
			<filelist dir="${outdirs.uncompressed}" files="${outfiles.deps.css.filename},${outfiles.core.css.filename}" />
		</concat>
	</target>
	
	<!-- Prepare the Compressed Directory -->
	<target name="preparecompressed" depends="makedirs">
		<!-- Copy the Necessary Dirs/Files to the Compressed Dir --> 
		<copy todir="${outdirs.compressed}">
			<fileset dir="${outdirs.uncompressed}" />
		</copy>
	</target>
	
	<!-- Compress the JS Files  -->
	<target name="compress-js" depends="preparecompressed">
		<!-- Compress Aloha jQuery File -->
		<antcall target="yuijs">
			<param name="infile" value="${outdirs.uncompressed}/${outfiles.jquery.js.filename}"/>
			<param name="outfile" value="${outdirs.compressed}/${outfiles.jquery.js.filename}"/>
		</antcall>
		
		<!-- Compress Aloha EXT File -->
		<antcall target="yuijs">
			<param name="infile" value="${outdirs.uncompressed}/${outfiles.ext.js.filename}"/>
			<param name="outfile" value="${outdirs.compressed}/${outfiles.ext.js.filename}"/>
		</antcall>
		
		<!-- Compress Aloha Deps File -->
		<antcall target="closurejs">
			<param name="infile" value="${outdirs.uncompressed}/${outfiles.deps.js.filename}"/>
			<param name="outfile" value="${outdirs.compressed}/${outfiles.deps.js.filename}"/>
		</antcall>
		
		<!-- Compress Aloha Core File -->
		<antcall target="closurejs">
			<param name="infile" value="${outdirs.uncompressed}/${outfiles.core.js.filename}"/>
			<param name="outfile" value="${outdirs.compressed}/${outfiles.core.js.filename}"/>
		</antcall>
		
		<!-- Compress Aloha Combined File -->
		<concat destfile="${outdirs.compressed}/${filename}.js" force="no">
			<filelist dir="${outdirs.compressed}" files="${outfiles.jquery.js.filename},${outfiles.ext.js.filename},${outfiles.deps.js.filename},${outfiles.core.js.filename}" />
		</concat>
		
		<!-- Compress Aloha Plugins Files -->
		<apply executable="${java}" output="${outdir}/closure.log" dir="${outdirs.compressed}/${pluginsdir}"  append="true" failonerror="true" relative="true" addsourcefile="true" verbose="true" parallel="false" skipemptyfilesets="true">
			<arg value="-cp" /> 
			<arg pathref="minify.classpath" /> 
			<arg line="-jar ${compiler.closure}" />
			<arg line="--js_output_file" />
			<targetfile />
			<arg line="--js" />
			<srcfile />

			<fileset dir="${outdirs.compressed}/${pluginsdir}">
				<exclude name="**/examples/**"/>
				<include name="**/*.js"/>
			</fileset>
			<mapper type="glob" from="*.js" to="*.min.js"/>
		</apply>

		<!-- Adjust Aloha Plugins Files (remove .min) -->
		<move todir="${outdirs.compressed}/${pluginsdir}" includeemptydirs="false">
			<fileset dir="${outdirs.compressed}/${pluginsdir}">
				<exclude name="**/examples/**"/>
				<include name="**/*.min.js"/>
			</fileset>
			<mapper type="glob" from="*.min.js" to="*.js"/>
		</move>
		
		<!-- Clean Aloha Plugins Files (as the .min.js files may not have been entirely removed) -->
		<delete>
			<fileset dir="${outdirs.compressed}/${pluginsdir}">
				<exclude name="**/examples/**"/>
				<include name="**/*.min.js"/>
			</fileset>
		</delete>
	</target>
	
	<!-- Compress the CSS Files -->
	<target name="compress-css" depends="preparecompressed">
		<!-- Compress Aloha Plugins Files -->
		<apply executable="${java}" output="${outdir}/yui.log" dir="${outdirs.compressed}"  append="true" failonerror="true" relative="true" addsourcefile="true" verbose="true" parallel="false" skipemptyfilesets="true">
			<arg value="-cp" /> 
			<arg pathref="minify.classpath" /> 
			<arg line="-jar ${compiler.yui}" />
			<arg line="--type css --verbose --charset UTF-8 -o" />
			<targetfile />
			<srcfile />

			<fileset dir="${outdirs.compressed}">
				<exclude name="**/examples/**"/>
				<include name="**/*.css"/>
			</fileset>
			<mapper type="identity" />
		</apply>
	</target>
	
	<!-- Adjust -->
	<target name="adjust">
		<!-- Remove Javascript Files from the various folders (as we just combined them) -->
		<delete>
			<fileset dir="${outdirs.uncompressed}/deps">
				<include name="**/*.js"/>
			</fileset>
			<fileset dir="${outdirs.compressed}/deps">
				<include name="**/*.js"/>
			</fileset>
		</delete>
		
		<!-- Create the Version Files -->
		<copy todir="${packagedir}" file="${srcdir}/VERSION.txt"/>
		<replace file="${packagedir}/VERSION.txt" token="##ALOHABUILT##" value="${now}"/>
		<replace file="${packagedir}/VERSION.txt" token="##ALOHAVERSION##" value="${version}"/>
		<copy todir="${outdirs.compressed}" file="${packagedir}/VERSION.txt"/>
		<copy todir="${outdirs.uncompressed}" file="${packagedir}/VERSION.txt"/>
		
		<!-- copy the index file to the output and replace the versions -->
		<copy todir="${packagedir}" file="${srcdir}/index.html"/>
		<copy todir="${packagedir}" file="${srcdir}/bg.png"/>
		<copy todir="${packagedir}" file="${srcdir}/logo.gif"/>
		<replace file="${packagedir}/index.html" token="##ALOHABUILT##" value="${now}"/>
		<replace file="${packagedir}/index.html" token="##ALOHAVERSION##" value="${version}"/>

		<!--
			build the examples
		-->
		<mkdir dir="${outdirs.examples}"/>
		<copy todir="${outdirs.examples}">
			<fileset dir="${srcdir.examples}" />
		</copy>
		<!-- copy aloha to the examples -->
		<mkdir dir="${outdirs.examples}/aloha" />
		<copy todir="${outdirs.examples}/aloha">
			<fileset dir="${outdirs.compressed}" />
		</copy>
		<!-- fix the include of the main file -->
		<replaceregexp flags="g" byline="true">
			<fileset dir="${packagedir}/examples">
	            <include name="**/*.html" />
			</fileset>
			<regexp pattern="(&lt;script.*?src=&quot;)../core/include.js(&quot;.*)"/>
			<substitution expression="\1aloha/aloha.js\2"/>
		</replaceregexp>
		<!-- fix the includes of the plugins -->
		<replaceregexp flags="g" byline="true">
			<fileset dir="${packagedir}/examples">
	            <include name="**/*.html" />
			</fileset>
			<regexp pattern="(&lt;script.*?src=&quot;)../plugins/(.*?&quot;.*)"/>
			<substitution expression="\1aloha/plugins/\2"/>
		</replaceregexp>
		<replaceregexp flags="g" byline="true">
			<fileset dir="${packagedir}/examples">
	            <include name="**/*.html" />
			</fileset>
			<regexp pattern="&lt;script&gt;GENTICS_Aloha_base.*&lt;/script&gt;"/>
			<substitution expression=""/>
		</replaceregexp>
	</target>

	<target name="package" depends="adjust">
		<!-- Package the output into a ZIP File -->
		<mkdir dir="${zipdir}" />
		<zip destfile="${zipdir}/${filename}-${version}.zip" basedir="${outdir}" includes="aloha-${version}/**"/>
	</target>
	
	<!-- Build all -->
	<target name="build" depends="clean,combine-js,compress-js,compress-css" />
	<target name="all" depends="build,adjust,package" />
</project>
